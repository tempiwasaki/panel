{
  "name": "comma-separated-values",
  "version": "3.6.1",
  "description": "Simple, blazing-fast CSV parsing/encoding in JavaScript. Full RFC 4180 compliance.",
  "main": "csv.js",
  "scripts": {
    "test": "mocha test.js",
    "benchmark": "node benchmark.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/knrz/CSV.js"
  },
  "keywords": [
    "csv",
    "csv parse",
    "csv encode",
    "csv rfc",
    "tsv",
    "tsv parse",
    "tsv encode",
    "tsv rfc"
  ],
  "author": {
    "name": "=",
    "email": "hi@knrz.co",
    "url": "http://knrz.co/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/knrz/CSV.js/issues"
  },
  "homepage": "https://github.com/knrz/CSV.js",
  "devDependencies": {
    "benchmark": "~1.0.0",
    "mocha": "~1.20.1"
  },
  "readme": "CSV.js\n======\n\nSimple, blazing-fast CSV parsing/encoding in JavaScript. Full [RFC 4180](http://tools.ietf.org/html/rfc4180) compliance.\n\nCompatible with browsers (>IE8), AMD, and NodeJS.\n\n\nInstallation\n------------\n\nDownload `csv.min.js` and reference to it using your preferred method.\n\nIf you use **Bower**, or **npm**, install the `comma-separated-values` package.\n\n\nInstantiation\n-------------\n\nCreate a CSV instance with `var csv = new CSV(data);`, where `data` is a plain-text CSV string. You can supply options with the format `var csv = new CSV(data, { option: value });`.\n\n\nOptions\n-------\n\n- **`cast`**: `true` to automatically cast numbers and booleans to their JavaScript equivalents. `false` otherwise. Supply your own `array` to override autocasting. Defaults to `true`.\n- **`lineDelimiter`**: The `string` that separates lines from one another. If parsing, defaults to autodetection. If encoding, defaults to `'\\r\\n'`.\n- **`cellDelimiter`**: A 1-character-long `string` that separates values from one another. If parsing, defaults to autodetection. If encoding, defaults to `','`.\n- **`header`**: `true` if the first row of the CSV contains header values, or supply your own `array`. Defaults to `false`.\n\nYou can update an option's value any time after instantiation with `csv.set(option, value)`.\n\n\nQuickstart\n----------\n\nFor those accustomed to JavaScript, the CSV.js API:\n\n```javascript\n// The instance will set itself up for parsing or encoding on instantiation,\n// which means that each instance can only either parse or encode.\n// The `options` object is optional\nvar csv = new CSV(data, [options]);\n\n// If the data you've supplied is an array,\n// CSV#encode will return the encoded CSV.\n// It will otherwise fail silently.\nvar encoded = csv.encode();\n\n// If the data you've suopplied is a string,\n// CSV#parse will return the parsed CSV.\n// It will otherwise fail silently.\nvar parsed = csv.parse();\n\n// The CSV instance can return the record immediately after\n// it's been encoded or parsed to prevent storing the results\n// in a large array by calling CSV#forEach and passing in a function.\ncsv.forEach(function(record) {\n  // do something with the record\n});\n\n// CSV includes some convenience class methods:\nCSV.parse(data, options); // identical to `new CSV(data, options).parse()`\nCSV.encode(data, options); // identical to `new CSV(data, options).encode()`\nCSV.forEach(data, options, callback); // identical to `new CSV(data, options).forEach(callback)`\n\n// For overriding automatic casting, set `options.cast` to an array.\n// For `parsing`, valid array values are: 'Number', 'Boolean', and 'String'.\nCSV.parse(data, { cast: ['String', 'Number', 'Number', 'Boolean'] });\n// For `encoding`, valid array values are 'Array', 'Object', 'String', 'Null', and 'Primitive'.\nCSV.encode(data, { cast: ['Primitive', 'Primitive', 'String'] });\n```\n\n\nParsing\n-------\n\nBy default CSV.js will return an `array of arrays`.\n\n```javascript\nvar data = '\\\n1850,20,0,1,1017281\\r\\n\\\n1850,20,0,2,1003841\\r\\n\\\n...\n';\nnew CSV(data).parse()\n/*\nReturns:\n[\n  [1850, 20, 0, 1, 1017281],\n  [1850, 20, 0, 2, 1003841]\n  ...\n]\n*/\n```\n\n\nIf the CSV's first row is a header, set `header` to `true`, and CSV.js will return an `array of objects`.\n\n```javascript\nvar data = '\\\nyear,age,status,sex,population\\r\\n\\\n1850,20,0,1,1017281\\r\\n\\\n1850,20,0,2,1003841\\r\\n\\\n...\n';\nnew CSV(data, { header: true }).parse();\n/*\nReturns:\n[\n  { year: 1850, age: 20, status: 0, sex: 1, population: 1017281 },\n  { year: 1850, age: 20, status: 0, sex: 2, population: 1003841 }\n  ...\n]\n*/\n```\n\n\nYou may also supply your own header values, if the text does not contain them, by setting `header` to an `array` of field values.\n\n```javascript\nvar data = '\\\n1850,20,0,1,1017281\\r\\n\\\n1850,20,0,2,1003841\\r\\n\\\n...\n';\nnew CSV(data, {\n  header: ['year', 'age', 'status', 'sex', 'population']\n}).parse();\n/*\nReturns:\n[\n  { year: 1850, age: 20, status: 0, sex: 1, population: 1017281 },\n  { year: 1850, age: 20, status: 0, sex: 2, population: 1003841 }\n  ...\n]\n*/\n```\n\n\nEncoding\n--------\n\nCSV.js accepts an `array of arrays` or an `array of objects`.\n\n```javascript\nvar data = [[1850, 20, 0, 1, 1017281], [1850, 20, 0, 2, 1003841]...];\nnew CSV(data).encode();\n/*\nReturns:\n1850,20,0,1,1017281\\r\\n\\\n1850,20,0,2,1003841\\r\\n\\\n...\n*/\n```\n\n\nTo add headers to an `array of arrays`, set `header` to an `array` of header field values.\n\n```javascript\nvar data = [[1850, 20, 0, 1, 1017281], [1850, 20, 0, 2, 1003841]];\nnew CSV(data, { header: [\"year\", \"age\", \"status\", \"sex\", \"population\"] }).encode();\n/*\nReturns:\n\"year\",\"age\",\"status\",\"sex\",\"population\"\\r\\n\\\n1850,20,0,1,1017281\\r\\n\\\n1850,20,0,2,1003841\\r\\n\\\n*/\n```\n\n\nTo add headers to an `array of objects`, just set `header` to `true`.\n\n```javascript\nvar data = [\n  { year: 1850, age: 20, status: 0, sex: 1, population: 1017281 },\n  { year: 1850, age: 20, status: 0, sex: 2, population: 1003841 }\n];\nnew CSV(data, { header: true }).encode();\n/*\nReturns:\n\"year\",\"age\",\"status\",\"sex\",\"population\"\\r\\n\\\n1850,20,0,1,1017281\\r\\n\\\n1850,20,0,2,1003841\\r\\n\\\n*/\n```\n\n\nStreaming\n---------\n\nIf the dataset that you've provided is to be parsed, calling `CSV.prototype.forEach` and supplying a function will call your function and supply it with the parsed record immediately after it's been parsed.\n\n```javascript\nvar data = '\\\n1850,20,0,1,1017281\\r\\n\\\n1850,20,0,2,1003841\\r\\n\\\n...\n';\nnew CSV(data).forEach(function(array) {\n  /*\n   * do something with the incoming array\n   * array example:\n   *   [1850, 20, 0, 1, 1017281]\n   */\n});\n```\n\nLikewise, if you've requested an `array of objects`, you can still call `CSV.prototype.forEach`:\n\n```javascript\nvar data = '\\\nyear,age,status,sex,population\\r\\n\\\n1850,20,0,1,1017281\\r\\n\\\n1850,20,0,2,1003841\\r\\n\\\n...\n';\nnew CSV(data, { header: true }).forEach(function(object) {\n  /*\n   * do something with the incoming object\n   * object example:\n   *   { year: 1850, age: 20, status: 0, sex: 1, population: 1017281 }\n   */\n});\n```\n\n\nIf you're dataset is to be encoded, `CSV.prototype.forEach` will call your function and supply the CSV-encoded line immediately after the line has been encoded:\n\n```javascript\nvar data = [[1850, 20, 0, 1, 1017281], [1850, 20, 0, 2, 1003841]];\nnew CSV(data).forEach(function(line) {\n  /*\n   * do something with the incoming line\n   * line example:\n   *   \"1850,20,0,1,1017281\\r\\n\\\"\"\n   */\n});\n```\n\nCasting\n-------\n\n```javascript\n// For overriding automatic casting, set `options.cast` to an array.\n// For `parsing`, valid array values are: 'Number', 'Boolean', and 'String'.\nCSV.parse(data, { cast: ['String', 'Number', 'Number', 'Boolean'] });\n// For `encoding`, valid array values are 'Array', 'Object', 'String', 'Null', and 'Primitive'.\nCSV.encode(data, { cast: ['Primitive', 'Primitive', 'String'] });\n```\n\n\nConvenience Methods\n-------------------\n\n```javascript\nCSV.parse(data, options) // identical to `new CSV(data, options).parse()`\nCSV.encode(data, options) // identical to `new CSV(data, options).encode()`\nCSV.forEach(data, options, callback) // identical to `new CSV(data, options).forEach(callback)`\n```\n\n\nSpecial Thanks\n--------------\n\n- [Benjamin Gruenbaum](https://github.com/benjamingr) for helping improve performance.\n",
  "readmeFilename": "README.md",
  "_id": "comma-separated-values@3.6.1",
  "_from": "comma-separated-values@*"
}
